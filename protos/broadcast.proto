syntax = "proto3";

import "server.proto";

package lugo;

option go_package = "github.com/lugobots/lugo4go/proto";

// Service to be consumed by clients (e.g. frontend, app, etc) to watch the match.
// The game server implements a Broadcast service. This service may help you to control or watch the game during
// training sessions.
service Broadcast {
  // Keep an open stream that publish all important events in the match.
  rpc OnEvent (WatcherRequest) returns (stream GameEvent);

  // Returns the game setup configuration.
  rpc GetGameSetup (WatcherRequest) returns (GameSetup);

  // StartGame allows the master watcher to start the match.
  // See the Game Server starting mode to understand how it works.
  rpc StartGame(StartRequest) returns (GameSetup);
}
message WatcherRequest {
  // Not used on localhost
  string uuid = 1;
}

message StartRequest {
  // Not used on localhost
  string watcher_uuid = 1;
}

// Brings the game snapshot and the event in a specialised format.
message GameEvent {
  // Game snapshot after the event has happened.
  GameSnapshot game_snapshot = 1;
  oneof event {
    EventNewPlayer new_player = 2;
    EventLostPlayer lost_player = 3;
    EventStateChange state_change = 4;
    EventGoal goal = 5;
    EventGameOver game_over = 6;
    EventDebugBreakpoint breakpoint = 7;
    EventDebugReleased debug_released = 8;
  }
}

message GameSetup {
  enum StartingMode {
    // start the game as soon as all players are connected
    NO_WAIT = 0;
    // do not start until the master watcher request (gRPC call to Broadcast service)
    WAIT = 1;
  }
  enum ListeningMode {
    // respect the timer defined by listening duration
    TIMER = 0;
    // immediately after all orders
    RUSH = 1;
    // wait external remote control (dev only)
    REMOTE = 2;
  }

  // Defines the communication protocol version between the players and the game server.
  // The players also inform to the server what protocol they will use. If incompatible, the server will reject the player.
  string protocol_version = 1;
  bool dev_mode = 2;
  StartingMode start_mode = 3;
  ListeningMode listening_mode = 4;
  // in milliseconds
  uint32 listening_duration = 5;
  uint32 game_duration = 6;

  TeamSettings home_team = 8;
  TeamSettings away_team = 9;
}

message TeamSettings {
  string name = 1;
  string avatar = 2;
  TeamColors colors = 3;
}

message TeamColors {
  TeamColor primary = 1;
  TeamColor secondary = 2;
}

message TeamColor {
  uint32 red = 1;
  uint32 green = 2;
  uint32 blue = 4;
}

// Represents the event of having a new player connected to the game.
message EventNewPlayer {
  // Player that has connected to the game.
  Player player = 1;
}

// Represents the event of having a player disconnected from the game.
message EventLostPlayer {
  // Player that has disconnected from the game.
  Player player = 1;
}

// Represents the event of having the game state changed (e.g. from Waiting to GetReady).
message EventStateChange {
  // State of the game before the event.
  GameSnapshot.State previous_state = 1;
  // State of the game after the event.
  GameSnapshot.State new_state = 2;
}

// Represents the event of having a goal during the match
message EventGoal {
  // Side of the team that changed the score.
  Team.Side side = 1;
  // @todo implementing the player who scored.
}

// Represents the event of having the game ended.
message EventGameOver {
}

// (only available dev mode) Represents the event of having a breakpoint reached.
message EventDebugBreakpoint {
  enum Breakpoint {
    // Breakpoint that breaks the game before each player orders set be processed during the "Playing" state
    // Each player's order set will be processed at once, so the breakpoint controls the process based on
    // players, not on orders.
    ORDERS = 0;
    // Breakpoint that breaks the game before each player turn be processed during the "Playing" state
    TURN = 1;
  }
  // Type of the breakpoint reached.
  Breakpoint breakpoint = 1;
}

// (only available dev mode) Represents the event of having a breakpoint released.
message EventDebugReleased {
}
